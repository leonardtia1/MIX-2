    agent any
    environment {
      NEW_VERSION = '1.3.0'
      SERVER_CREDENTIALS = credentials('ansadmin-host')
    }
    stages {
        
        stage('Build') {
            steps {
               echo "Building the application........" 
               echo "Building version ${NEW_VERSION}" 
            }
        }
        stage('deploy') {
          steps {
            sh('ls -la ${SERVER_CREDENTIALS}')
          }
        }
    }
}

### 
Credentials
Credentials Binding Plugin


pipeline {
    agent any
    stages {
        stage('Chechout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/leonardtia1/jenkins.git']]])
            }
        }
		stage {
			
		}
    }
}
            

// Declarative //
pipeline {
	agent any
	stages {
		stage('Test') {
			steps {
				sh 'cat /etc/*release'
			}
		}
	}
	post {
		failure {
			mail bcc: '', body: '''Hi 
			Please Check Jenkins the job failed.''', cc: '', from: '', replyTo: '', subject: 'Jenkins Job Notification', to: 'tiajearad44@gmail.com'
		}
	}
}


// Declarative //
pipeline {
	agent any
	stages {
		stage('Test') {
			steps {
				sh 'cat /etc/*release....'
			}
		}
	}
	post {
		failure {
			mail bcc: '', body: '''Hi 
			Please Check Jenkins the job failed.''', cc: '', from: '', replyTo: '', subject: 'Jenkins Job Notification', to: 'tiajearad44@gmail.com'
		}
	}
}




def gv
pipeline {

    agent any

	parameters {
		//string(name: 'VERSION', defaultValue: "1.30", description: "Version to be deploy to prod")
		choice (name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: "Version to be deploy to prod")
		booleanParam(name: 'executeTest', defaultValue: false, description: "")
	}
    stages {
        stage('init') {
            steps {
				script {
					gv = load "script.groovy"
				}
            }
        }
        stage('compile') {
            steps {
				script {
					gv.CompileApp()
				}
            }
        }
        stage('build') {
            steps {
               script {
				   gv.BuildApp()
			   }
            }
        }
        stage('test') {
			when {
				expression {
					params.executeTest
				}
			}
            steps {
               script {
				   gv.TestAPP()
			   }
            }
        }
        stage('package') {
            steps {
               script {
				   gv.PackageApp()
			   }
            }
        }
        stage('deploy') {
            steps {
               script {
				   gv.DeployApp()
			   }
            }
        }
    }
}



def gv

pipeline {
    agent any
    parameters {
        agent any

	parameters {
		//string(name: 'VERSION', defaultValue: "1.30", description: "Version to be deploy to prod")
		choice (name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: "Version to be deploy to prod")
		booleanParam(name: 'executeTests', defaultValue: false, description: "")
    }
    stages {
        stage("init") {
            steps {
                script {
                   gv = load "script.groovy" 
                }
            }
        }
        stage("compile") {
            steps {
				script {
					gv.CompileApp()
				}
            }
        }
        stage('build') {
            steps {
               script {
				   gv.BuildApp()
			   }
            }
        }
        stage("test") {
            when {
                expression {
                    params.executeTests
                }
            }
            steps {
               script {
				   gv.TestAPP()
			   }
            }
        }
        stage('package') {
            steps {
               script {
				   gv.PackageApp()
			   }
            }
        }
        stage("deploy") {
            steps {
                script {
                    gv.DeployApp()
                }
            }
        }
    }   
}

